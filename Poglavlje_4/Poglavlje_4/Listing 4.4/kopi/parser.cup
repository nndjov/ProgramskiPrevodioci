// CUP specification for a simple expression evaluator (w/ actions)

import java_cup.runtime.*;

/* Terminals (tokens returned by the scanner). */
terminal           SEMI, ADD, SUB, MUL, DIV;
terminal           LPAREN, RPAREN;
terminal Integer   NUMBER;

/* Non-terminals */
nonterminal            expr_list, expr_part;
nonterminal String add_op, mul_op;
nonterminal Integer    expr, term, factor;

/* Precedences */

precedence left ADD, SUB;
precedence left MUL, DIV;


/* The grammar */


expr_list ::= expr_list expr_part:e 
	      | 
              expr_part:e
              ;

expr_part ::= expr:e 
	      {: System.out.println("= "+ e) ; 
	         Glavni.REZULTAT = Glavni.REZULTAT+"\n REZULTAT: " + e; 
	      :} 
              SEMI              
	      ;


expr ::= term:t {: RESULT = t; :}
	| 
	expr:e add_op:op term:t {: RESULT = new Integer ((op.equals("add"))? e.intValue()+t.intValue() : e.intValue()-t.intValue()); :}
	;

term ::= factor:f {: RESULT = f; :}
	| 
	term:t mul_op:op factor:f {: RESULT = new Integer((op.equals("mul"))? t.intValue()*f.intValue() : t.intValue()/f.intValue()); :}
	;

factor ::= NUMBER:val 
           {: RESULT = new Integer(val); :}
           |
           LPAREN expr:e RPAREN 
           {: RESULT = e; :}
           ;

add_op ::= ADD {: RESULT="add"; :} | SUB {: RESULT="sub"; :};
mul_op ::= MUL {: RESULT="mul"; :} | DIV {: RESULT="div"; :};